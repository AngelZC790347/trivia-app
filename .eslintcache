[{"/Users/angelcano/Front-Develop/trivia-app/src/index.tsx":"1","/Users/angelcano/Front-Develop/trivia-app/src/Components/App.tsx":"2","/Users/angelcano/Front-Develop/trivia-app/src/Components/GameApp.tsx":"3","/Users/angelcano/Front-Develop/trivia-app/src/Components/GameMain.tsx":"4","/Users/angelcano/Front-Develop/trivia-app/src/Components/FinishTable.tsx":"5","/Users/angelcano/Front-Develop/trivia-app/src/Components/QueTypeSelector.tsx":"6","/Users/angelcano/Front-Develop/trivia-app/src/Components/SecQu.tsx":"7"},{"size":465,"mtime":1611198774706,"results":"8","hashOfConfig":"9"},{"size":897,"mtime":1657529302709,"results":"10","hashOfConfig":"9"},{"size":1864,"mtime":1611508640779,"results":"11","hashOfConfig":"9"},{"size":1777,"mtime":1611507319442,"results":"12","hashOfConfig":"9"},{"size":598,"mtime":1611509045786,"results":"13","hashOfConfig":"9"},{"size":1600,"mtime":1611442336774,"results":"14","hashOfConfig":"9"},{"size":2826,"mtime":1611508331075,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"6kj7ib",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"/Users/angelcano/Front-Develop/trivia-app/src/index.tsx",[],["34","35"],"/Users/angelcano/Front-Develop/trivia-app/src/Components/App.tsx",[],"/Users/angelcano/Front-Develop/trivia-app/src/Components/GameApp.tsx",[],"/Users/angelcano/Front-Develop/trivia-app/src/Components/GameMain.tsx",[],"/Users/angelcano/Front-Develop/trivia-app/src/Components/FinishTable.tsx",["36"],"import {Component}from 'react';\nimport {IPropsFinalTable}from '../Interfaces/IProps'\nexport default class FinishTable extends Component<IPropsFinalTable,any>{\n    constructor(props:IPropsFinalTable){\n        super(props);\n    }\n    render(){\n        return(\n            <>\n                <table className=\"table table-striped\">\n                    <tr><th>Completed</th></tr>\n                    <tr><td>Incorrects</td><td>{this.props.wrongAnswer}</td></tr>\n                    <tr><td>Corrects</td><td>{this.props.goodAnswer}</td></tr>\n                </table>\n            </>\n        );\n    }\n}\n","/Users/angelcano/Front-Develop/trivia-app/src/Components/QueTypeSelector.tsx",["37"],"import {Component} from 'react';\nimport{IPropsGameQuest} from '../Interfaces/IProps';\nimport{IStateQueTypesSelelctor}from '../Interfaces/IStates';\nexport default class QueTypeSelector extends Component<IPropsGameQuest,IStateQueTypesSelelctor>{\n    constructor(props:IPropsGameQuest){\n        super(props);\n        this.state={\n            listQuestion:{}\n        }\n    }\n    private async listTypeGenerator(){\n        const ApiDbQueryUrl=\"https://opentdb.com/api_category.php\";\n        let data=new Object();\n        const response=await fetch(ApiDbQueryUrl);\n        data=await response.json();\n        this.setState({listQuestion:data});\n    }\n    componentDidMount(){\n        this.listTypeGenerator();\n    }\n    changeGameMode(e:React.MouseEvent<HTMLInputElement|HTMLTextAreaElement>,id:any){\n        e.preventDefault();\n        console.log(id);\n        this.props.changeGameMode();\n        this.props.setTypeSelector(id);\n    }\n    render():JSX.Element{\n        let myObj=Object(this.state.listQuestion);\n        let listButton=[];\n        for (const key in myObj) {\n            const element = myObj[key];\n            for (const key2 in element) {\n                let el=element[key2];\n                listButton.push(<input type=\"button\" className=\"btn btn-outline-success btn-block\" value={el.name} key={el.id} onClick={e=>this.changeGameMode(e,el.id)}/>);      \n            }           \n        }    \n        return(\n            <form className=\"form-group\">\n                <h2 className=\"text-center\">Selec a Category</h2>\n                {listButton}\n            </form>\n        );\n    }\n}","/Users/angelcano/Front-Develop/trivia-app/src/Components/SecQu.tsx",["38","39"],"import {Component, FormEvent} from 'react';\nimport {IPropsGameMode} from '../Interfaces/IProps';\nimport {IStateSecQu} from '../Interfaces/IStates'\nexport default class SecQu extends Component<IPropsGameMode,IStateSecQu>{\n    public constructor(props:any){\n        super(props)\n        this.state={\n            typeSelector:0,\n            questObject:{}      \n        };\n    }\n    static  getDerivedStateFromProps(props:IPropsGameMode,state:IStateSecQu){     \n        return ({typeSelector:props.typeNumber});\n    }\n    private async listTypeGenerator(typeSelector:number){\n        const ApiDbQueryUrl=\"https://opentdb.com/api.php?amount=1&category=\"+typeSelector+\"&difficulty=medium&type=multiple\";\n        let data=new Object();\n        const response=await fetch(ApiDbQueryUrl);\n        data=await response.json();\n        this.setState({questObject:data});\n    }\n    componentDidMount(){\n        this.listTypeGenerator(this.props.typeNumber);\n    }\n    private countAnwser(e:FormEvent<HTMLInputElement>,id:string){\n        e.preventDefault();\n        if (id===\"correct\") {\n            this.props.increaseGoodAnswer();\n        }else{\n            this.props.decreaseWrogAnswer();\n        }\n    }\n    render(){\n        let myObj=Object(this.state.questObject);\n        var listButton:JSX.Element[]=[];\n        var questionElemnt:JSX.Element=<label></label>;\n        for (const key in myObj) {\n            let element=myObj[key];\n            console.log(element);\n            for (const key2 in element) {\n                const element2 = element[key2];\n                console.log(element2);\n                for (const key3 in element2) {\n                    const element3=element2[key3];\n                    console.log(element3);\n                    if(key3===\"question\"){\n                    questionElemnt=<p><pre>{element3}</pre></p>\n                    }\n                    if(key3===\"correct_answer\"){\n                        listButton.push(<><input type=\"radio\" key=\"correct\" name=\"alter\" onFocus={e=>this.countAnwser(e,\"correct\")}></input><label>{element3}</label><br></br></>)\n                    }               \n                    if(typeof(element3)!=\"string\"){\n                        let i=0;\n                       for (const key4 in element3) {\n                               const element4 = element3[key4];\n                               listButton.push(<><input type=\"radio\" key={i.toString()} name=\"alter\" onFocus={e=>this.countAnwser(e,i.toString())}></input><label>{element4}</label><br></br></>)\n                               i++;\n                       }\n                    }                    \n                }    \n            }         \n        }   \n        return(\n            <section>\n                {questionElemnt}\n                {listButton}\n            </section>\n        );\n    }\n}",{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":4,"column":5,"nodeType":"46","messageId":"47","endLine":6,"endColumn":6},{"ruleId":"48","severity":1,"message":"49","line":13,"column":18,"nodeType":"50","messageId":"51","endLine":13,"endColumn":30},{"ruleId":"48","severity":1,"message":"49","line":17,"column":18,"nodeType":"50","messageId":"51","endLine":17,"endColumn":30},{"ruleId":"52","severity":1,"message":"53","line":56,"column":111,"nodeType":"54","messageId":"55","endLine":56,"endColumn":146},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i'.","ArrowFunctionExpression","unsafeRefs","no-global-assign","no-unsafe-negation"]