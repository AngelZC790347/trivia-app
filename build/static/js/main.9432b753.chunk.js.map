{"version":3,"sources":["Components/SecQu.tsx","Components/QueTypeSelector.tsx","Components/GameMain.tsx","Components/FinishTable.tsx","Components/GameApp.tsx","Components/App.tsx","index.tsx"],"names":["SecQu","props","state","typeSelector","questObject","ApiDbQueryUrl","data","Object","fetch","response","json","this","setState","listTypeGenerator","typeNumber","e","id","preventDefault","increaseGoodAnswer","decreaseWrogAnswer","myObj","listButton","questionElemnt","key","element","key2","console","log","element2","key3","element3","push","type","name","onFocus","countAnwser","i","key4","element4","toString","Component","QueTypeSelector","listQuestion","changeGameMode","setTypeSelector","el","className","value","onClick","GameMain","numberTypeSelector","questDisplaying","bind","imcreaseNumberQue","elemnt","decreaseWrongAnswer","style","paddingLeft","gameMode","FinishTable","wrongAnswer","goodAnswer","GameApp","points","time","numQuestion","increaseNumberQue","increaGoodAnswer","renderEl","player","App","action","noValidate","htmlFor","marginLeft","onChange","currentTarget","ReactDOM","render","document","getElementById","StrictMode"],"mappings":"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","file":"static/js/main.9432b753.chunk.js","sourcesContent":["import {Component, FormEvent} from 'react';\nimport {IPropsGameMode} from '../Interfaces/IProps';\nimport {IStateSecQu} from '../Interfaces/IStates'\nexport default class SecQu extends Component<IPropsGameMode,IStateSecQu>{\n    public constructor(props:any){\n        super(props)\n        this.state={\n            typeSelector:0,\n            questObject:{}      \n        };\n    }\n    static  getDerivedStateFromProps(props:IPropsGameMode,state:IStateSecQu){     \n        return ({typeSelector:props.typeNumber});\n    }\n    private async listTypeGenerator(typeSelector:number){\n        const ApiDbQueryUrl=\"https://opentdb.com/api.php?amount=1&category=\"+typeSelector+\"&difficulty=medium&type=multiple\";\n        let data=new Object();\n        const response=await fetch(ApiDbQueryUrl);\n        data=await response.json();\n        this.setState({questObject:data});\n    }\n    componentDidMount(){\n        this.listTypeGenerator(this.props.typeNumber);\n    }\n    private countAnwser(e:FormEvent<HTMLInputElement>,id:string){\n        e.preventDefault();\n        if (id===\"correct\") {\n            this.props.increaseGoodAnswer();\n        }else{\n            this.props.decreaseWrogAnswer();\n        }\n    }\n    render(){\n        let myObj=Object(this.state.questObject);\n        var listButton:JSX.Element[]=[];\n        var questionElemnt:JSX.Element=<label></label>;\n        for (const key in myObj) {\n            let element=myObj[key];\n            console.log(element);\n            for (const key2 in element) {\n                const element2 = element[key2];\n                console.log(element2);\n                for (const key3 in element2) {\n                    const element3=element2[key3];\n                    console.log(element3);\n                    if(key3===\"question\"){\n                    questionElemnt=<p><pre>{element3}</pre></p>\n                    }\n                    if(key3===\"correct_answer\"){\n                        listButton.push(<><input type=\"radio\" key=\"correct\" name=\"alter\" onFocus={e=>this.countAnwser(e,\"correct\")}></input><label>{element3}</label><br></br></>)\n                    }               \n                    if(typeof(element3)!=\"string\"){\n                        let i=0;\n                       for (const key4 in element3) {\n                               const element4 = element3[key4];\n                               listButton.push(<><input type=\"radio\" key={i.toString()} name=\"alter\" onFocus={e=>this.countAnwser(e,i.toString())}></input><label>{element4}</label><br></br></>)\n                               i++;\n                       }\n                    }                    \n                }    \n            }         \n        }   \n        return(\n            <section>\n                {questionElemnt}\n                {listButton}\n            </section>\n        );\n    }\n}","import {Component} from 'react';\nimport{IPropsGameQuest} from '../Interfaces/IProps';\nimport{IStateQueTypesSelelctor}from '../Interfaces/IStates';\nexport default class QueTypeSelector extends Component<IPropsGameQuest,IStateQueTypesSelelctor>{\n    constructor(props:IPropsGameQuest){\n        super(props);\n        this.state={\n            listQuestion:{}\n        }\n    }\n    private async listTypeGenerator(){\n        const ApiDbQueryUrl=\"https://opentdb.com/api_category.php\";\n        let data=new Object();\n        const response=await fetch(ApiDbQueryUrl);\n        data=await response.json();\n        this.setState({listQuestion:data});\n    }\n    componentDidMount(){\n        this.listTypeGenerator();\n    }\n    changeGameMode(e:React.MouseEvent<HTMLInputElement|HTMLTextAreaElement>,id:any){\n        e.preventDefault();\n        console.log(id);\n        this.props.changeGameMode();\n        this.props.setTypeSelector(id);\n    }\n    render():JSX.Element{\n        let myObj=Object(this.state.listQuestion);\n        let listButton=[];\n        for (const key in myObj) {\n            const element = myObj[key];\n            for (const key2 in element) {\n                let el=element[key2];\n                listButton.push(<input type=\"button\" className=\"btn btn-outline-success btn-block\" value={el.name} key={el.id} onClick={e=>this.changeGameMode(e,el.id)}/>);      \n            }           \n        }    \n        return(\n            <form className=\"form-group\">\n                <h2 className=\"text-center\">Selec a Category</h2>\n                {listButton}\n            </form>\n        );\n    }\n}","import {IStateGameMain}from '../Interfaces/IStates';\nimport {IPropsGameMain} from '../Interfaces/IProps'\nimport SecQu from './SecQu';\nimport {Component } from 'react';\nimport QueTypeSelector from './QueTypeSelector';\nexport default class  GameMain extends Component <IPropsGameMain,IStateGameMain>{\n    constructor(props:IPropsGameMain){\n        super(props);\n        this.state={\n            numberTypeSelector:0,\n            questDisplaying:false\n        }\n        this.changeGameMode=this.changeGameMode.bind(this);\n        this.setTypeSelector=this.setTypeSelector.bind(this);\n      \n    }\n    static getDerivedStateFromProps(props:IPropsGameMain,state:IStateGameMain){\n        return({gameMode:props.questDisplaying});\n    }\n   \n    public changeGameMode():void{\n        if (this.state.questDisplaying===true){\n            this.props.imcreaseNumberQue();\n        }\n        this.setState({questDisplaying:!this.state.questDisplaying});\n    }\n    public setTypeSelector(typeSelector:number){\n        this.setState({numberTypeSelector:typeSelector});\n    }\n    render():JSX.Element{\n        let elemnt:JSX.Element;\n        elemnt=this.state.questDisplaying?<SecQu increaseGoodAnswer={this.props.increaseGoodAnswer} decreaseWrogAnswer={this.props.decreaseWrongAnswer} changeGameMode={this.changeGameMode} typeNumber={this.state.numberTypeSelector} ></SecQu>:<QueTypeSelector changeGameMode={this.changeGameMode} setTypeSelector={this.setTypeSelector}></QueTypeSelector>;    \n        return (\n            <>\n            <aside style={{paddingLeft:600}}><button className=\"btn btn-outline-primary mr-5\" onClick={this.changeGameMode}>Next</button><button className=\"btn btn-outline-primary ml-5\">Finish</button></aside>\n            {elemnt}\n            </>\n            );\n    }\n}","import {Component}from 'react';\nimport {IPropsFinalTable}from '../Interfaces/IProps'\nexport default class FinishTable extends Component<IPropsFinalTable,any>{\n    constructor(props:IPropsFinalTable){\n        super(props);\n    }\n    render(){\n        return(\n            <>\n                <table className=\"table table-striped\">\n                    <tr><th>Completed</th></tr>\n                    <tr><td>Incorrects</td><td>{this.props.wrongAnswer}</td></tr>\n                    <tr><td>Corrects</td><td>{this.props.goodAnswer}</td></tr>\n                </table>\n            </>\n        );\n    }\n}\n","import {Component}from 'react'\nimport{IStateGame} from '../Interfaces/IStates'\nimport{IPropsGame}from'../Interfaces/IProps';\nimport GameMain from './GameMain';\nimport FinishTable from './FinishTable';\nexport default class GameApp extends Component<IPropsGame,IStateGame>{   \n    constructor(props:IPropsGame){\n        super(props);\n        this.state={\n            points:0,\n            time:0,\n            numQuestion:1,\n            goodAnswer:0,\n            wrongAnswer:0,\n        };\n        this.increaseNumberQue=this.increaseNumberQue.bind(this);\n        this.increaGoodAnswer=this.increaGoodAnswer.bind(this);\n        this.decreaseWrongAnswer=this.decreaseWrongAnswer.bind(this);\n    }\n    public increaGoodAnswer(){\n        this.setState({goodAnswer:this.state.goodAnswer+1});\n    }\n    public decreaseWrongAnswer(){\n        this.setState({wrongAnswer:this.state.wrongAnswer+1});\n    }\n    public increaseNumberQue():void{\n        this.setState({numQuestion:this.state.numQuestion+1});\n    }\n    render(){\n        let stringMode=false;\n        let renderEl=this.state.numQuestion<=20?<GameMain questDisplaying={stringMode} imcreaseNumberQue={this.increaseNumberQue} increaseGoodAnswer={this.increaGoodAnswer} decreaseWrongAnswer={this.decreaseWrongAnswer}></GameMain>:<section><FinishTable goodAnswer={this.state.goodAnswer} wrongAnswer={this.state.wrongAnswer}></FinishTable></section>\n        return(\n            <>\n                <header className=\"jumbotron text-center pb-2 pt-2\">\n                    <aside className=\"p-2 bg-info\"><strong>{this.state.numQuestion<=20?\"Question:\"+this.state.numQuestion:\"Good Job\"}</strong></aside>\n                    <h1>Player Name: {this.props.player}</h1> \n                </header>                \n                <main >\n                    {renderEl}\n                </main>\n            </> \n        );\n    }\n}","import ReactDOM from 'react-dom';\nimport '../Styles/App.css';\nimport{IStateApp}from '../Interfaces/IStates'\nimport GameApp from './GameApp';\nfunction App():JSX.Element{\n  const state:IStateApp={name:\"\"};\n  return (\n    <div className=\"App\">\n      <form action=\"\" className=\"App-header\" noValidate>\n        <div className=\"form-row\">\n          <label htmlFor=\"player-name\" style={{marginLeft:\"20px\"}}>Nombre:</label>\n          <input  type=\"text\" className=\"form-control m-3\" id=\"player-name\"\n            onChange={(e)=>state.name=e.currentTarget.value}\n          />\n          <button id=\"sub-btn\" className=\"btn btn-primary m-4\" \n            onClick={()=>{\n              ReactDOM.render(<GameApp player={state.name}></GameApp>,document.getElementById('root')); \n            }}\n          >Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/index.css';\nimport App from './Components/App';\n  ReactDOM.render(\n    <React.StrictMode>\n      <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );    \n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}